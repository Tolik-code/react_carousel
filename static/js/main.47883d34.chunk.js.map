{"version":3,"sources":["components/Carousel.js","App.js","index.js"],"names":["Carousel","images","steep","frameSize","itemWidth","animationDuration","infinite","updateList","widthCarousel","length","widthOneScroll","startPosCarousel","maxWidthScroll","possibilityMove","validScrollStyle","scroll","navButtLeft","document","querySelector","navButtRight","valid","validScroll","butt","classList","add","remove","validMove","setTimeout","changeTransformAnim","elem","transform","anim","style","carousel","scrollCarousel","isNext","carusel","getBoundingClientRect","x","oneScroll","className","type","onClick","target","width","map","img","index","key","Date","src","alt","imagesFromServer","App","state","setting","output","previousElementSibling","value","this","setState","id","defaultValue","min","max","onInput","changeInputSeting","step","onChange","checked","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.47883d34.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Carousel.scss';\n\nconst Carousel = ({\n  images,\n  steep,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n  updateList,\n}) => {\n  const widthCarousel = itemWidth * images.length;\n  const widthOneScroll = steep * itemWidth;\n  let startPosCarousel = null;\n  const maxWidthScroll = widthCarousel - frameSize * itemWidth;\n  let possibilityMove = true;\n\n  const validScrollStyle = (scroll) => {\n    const navButtLeft = document.querySelector('.Carousel__navButton--prev');\n    const navButtRight = document.querySelector('.Carousel__navButton--next');\n\n    const valid = (validScroll, butt) => {\n      if (validScroll) {\n        butt.classList.add('Carousel__navButton--noScroll');\n      } else {\n        butt.classList.remove('Carousel__navButton--noScroll');\n      }\n    };\n\n    valid((scroll <= 0), navButtLeft);\n    valid(scroll >= maxWidthScroll, navButtRight);\n  };\n\n  const validMove = () => {\n    possibilityMove = false;\n    setTimeout(() => {\n      possibilityMove = true;\n    }, animationDuration);\n  };\n\n  const changeTransformAnim = (elem, transform, anim) => {\n    elem.style = `\n    transform: translateX(-${transform}px);\n    transition: ${anim}ms; `;\n  };\n\n  if (updateList) {\n    const carousel = document.querySelector('.Carousel__list-scroll');\n\n    changeTransformAnim(carousel, 0, 500);\n    validScrollStyle(0);\n  }\n\n  const scrollCarousel = (isNext) => {\n    const carusel = document.querySelector('.Carousel__list-scroll');\n    const scroll = carusel.getBoundingClientRect().x;\n\n    startPosCarousel = !startPosCarousel ? scroll : startPosCarousel;\n    let oneScroll = widthOneScroll - (scroll - startPosCarousel);\n\n    if (!isNext) {\n      oneScroll -= widthOneScroll * 2;\n    }\n\n    if (oneScroll >= maxWidthScroll) {\n      oneScroll = maxWidthScroll;\n    }\n\n    changeTransformAnim(carusel, oneScroll, animationDuration);\n\n    if (infinite) {\n      if (scroll - startPosCarousel === -maxWidthScroll\n        && isNext) {\n        changeTransformAnim(carusel, 0, animationDuration);\n      } else if (scroll === startPosCarousel\n        && !isNext) {\n        changeTransformAnim(carusel, maxWidthScroll, animationDuration);\n      }\n\n      return;\n    }\n\n    validScrollStyle(oneScroll);\n  };\n\n  return (\n    <div className=\"Carousel\">\n\n      <button\n        type=\"button\"\n        className={`\n        Carousel__navButton\n        Carousel__navButton--prev\n        ${!infinite && 'Carousel__navButton--noScroll'}`}\n        onClick={({ target }) => {\n          if (!possibilityMove) {\n            return;\n          }\n\n          scrollCarousel(false, target);\n          validMove();\n        }}\n      />\n\n      <ul className=\"Carousel__list\" style={{ width: frameSize * itemWidth }}>\n        <div className=\"Carousel__list-scroll\">\n          {images.map((img, index) => (\n            <li key={new Date()}>\n              <img\n                src={img}\n                alt={index + 1}\n                width={itemWidth}\n              />\n            </li>\n          ))}\n        </div>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"\n        Carousel__navButton\n        Carousel__navButton--next\"\n        onClick={({ target }) => {\n          if (!possibilityMove) {\n            return;\n          }\n\n          scrollCarousel(true, target);\n          validMove();\n        }}\n      />\n\n    </div>\n  );\n};\n\nexport default Carousel;\n\nCarousel.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.string).isRequired,\n  steep: PropTypes.number.isRequired,\n  frameSize: PropTypes.number.isRequired,\n  itemWidth: PropTypes.number.isRequired,\n  animationDuration: PropTypes.number.isRequired,\n  infinite: PropTypes.bool.isRequired,\n  updateList: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\n\nimport Carousel from './components/Carousel';\n\nconst imagesFromServer = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nclass App extends React.Component {\n  state = {\n    images: imagesFromServer,\n    steep: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n    updateList: false,\n  };\n\n  changeInputSeting(target, setting) {\n    const output = target.previousElementSibling;\n\n    output.value = target.value;\n    output.style = 'color: rgb(112, 0, 93); font-size: 22px;';\n    this.setState(setting);\n  }\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>\n          Carousel with\n          {`: ${images.length} `}\n          images\n        </h1>\n\n        <form className=\"form\">\n          <label className=\"form__inputs\">\n            steep\n            <output className=\"form__outputs\" id=\"steep\">3</output>\n            <input\n              type=\"range\"\n              defaultValue=\"3\"\n              min=\"1\"\n              max=\"5\"\n              onInput={({ target }) => (\n                this.changeInputSeting(target)\n              )}\n            />\n          </label>\n\n          <label className=\"form__inputs\">\n            frameSize\n            <output className=\"form__outputs\" id=\"frameSize\">3</output>\n            <input\n              type=\"range\"\n              defaultValue=\"3\"\n              min=\"1\"\n              max=\"5\"\n              onInput={({ target }) => (\n                this.changeInputSeting(target, { frameSize: target.value })\n              )}\n            />\n          </label>\n\n          <label className=\"form__inputs\">\n            itemWidth\n            <output className=\"form__outputs\" id=\"itemWidth\">130</output>\n            <input\n              type=\"range\"\n              defaultValue=\"130\"\n              min=\"100\"\n              max=\"280\"\n              step=\"10\"\n              onInput={({ target }) => (\n                this.changeInputSeting(target, {\n                  itemWidth: target.value,\n                  updateList: true,\n                })\n              )}\n            />\n          </label>\n\n          <p>\n            <label className=\"form__inputs\">\n              animationDuration\n              <output\n                className=\"form__outputs\"\n                id=\"animationDuration\"\n              >\n                1000\n              </output>\n              ms\n              <input\n                type=\"range\"\n                defaultValue=\"130\"\n                min=\"500\"\n                max=\"3500\"\n                step=\"500\"\n                onInput={({ target }) => (\n                  this.changeInputSeting(target, {\n                    animationDuration: target.value,\n                  })\n                )}\n              />\n            </label>\n\n            <label className=\"form__inputs\">\n              infinite\n              <input\n                type=\"checkbox\"\n                id=\"infinite\"\n                onChange={({ target }) => (\n                  this.setState({\n                    infinite: target.checked,\n                    updateList: true,\n                  })\n                )}\n              />\n            </label>\n          </p>\n\n        </form>\n\n        <Carousel\n          {...this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}