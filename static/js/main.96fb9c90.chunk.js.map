{"version":3,"sources":["components/Carousel.js","App.js","index.js"],"names":["Carousel","state","scrollLength","isStart","isEnd","validNextScroll","itemWidth","frameSize","this","props","setState","scroll","newScrollLength","isStartValue","isEndValue","animationDuration","setTimeout","images","steep","infinite","widthListCarousel","length","widthOneScroll","endList","currentTransform","transitionDuration","transform","className","type","onClick","oneScroll","style","width","map","img","index","key","src","alt","height","React","Component","imagesFromServer","App","target","typeSetting","output","previousElementSibling","newState","value","id","defaultValue","min","max","onInput","changeInputSeting","step","onChange","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.96fb9c90.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Carousel.scss';\n\nclass Carousel extends React.Component {\n    state = {\n      scrollLength: 0,\n      isStart: true,\n      isEnd: false,\n      validNextScroll: true,\n    }\n\n    componentDidUpdate({ itemWidth, frameSize, }) {\n      if (this.props.itemWidth !== itemWidth\n        || this.props.frameSize !== frameSize) {\n        this.setState({\n          scrollLength: 0,\n          isStart: true,\n          isEnd: false,\n        });\n      }\n    }\n\n    oneScroll(scroll, newScrollLength,\n      isStartValue = false, isEndValue = false) {\n      const { animationDuration } = { ...this.props };\n\n      this.setState((state) => {\n        let currentScroll;\n\n        if (scroll) {\n          currentScroll = state.scrollLength + scroll;\n        } else {\n          currentScroll = newScrollLength;\n        }\n\n        return {\n          scrollLength: currentScroll,\n          isStart: isStartValue,\n          isEnd: isEndValue,\n          validNextScroll: false,\n        };\n      });\n\n      setTimeout(() => (\n        this.setState({ validNextScroll: true })\n      ), animationDuration);\n    }\n\n    render() {\n      const {\n        images,\n        steep,\n        frameSize,\n        itemWidth,\n        animationDuration,\n        infinite,\n      } = { ...this.props };\n\n      const {\n        scrollLength,\n        isStart,\n        isEnd,\n        validNextScroll,\n      } = { ...this.state };\n\n      const widthListCarousel = itemWidth * images.length;\n      const widthOneScroll = steep * itemWidth;\n      const endList = widthListCarousel - frameSize * itemWidth;\n\n      const currentTransform = {\n        transitionDuration: `${animationDuration}ms`,\n        transform: `translateX(-${scrollLength}px)`,\n      };\n\n      const prevScroll = () => {\n        if (!validNextScroll) {\n          return;\n        }\n\n        const currentScrollLength = (\n          scrollLength - widthOneScroll);\n\n        if (currentScrollLength <= 0) {\n          if (infinite && isStart) {\n            this.oneScroll(null, endList, false, true);\n          } else {\n            this.oneScroll(null, 0, true, false);\n          }\n\n          return;\n        }\n\n        this.oneScroll(-widthOneScroll);\n      };\n\n      const nextScroll = () => {\n        if (!validNextScroll) {\n          return;\n        }\n\n        const currentScrollLength = (\n          this.state.scrollLength + (\n            widthOneScroll + frameSize * itemWidth));\n\n        if (currentScrollLength >= widthListCarousel) {\n          if (infinite && isEnd) {\n            this.oneScroll(null, 0, true, false);\n          } else {\n            this.oneScroll(null, endList, false, true);\n          }\n\n          return;\n        }\n\n        this.oneScroll(widthOneScroll);\n      };\n\n      return (\n        <div className=\"Carousel\">\n\n          <button\n            type=\"button\"\n            className={`\n            Carousel__navButton\n            Carousel__navButton--prev\n            ${\n              this.state.isStart\n              && !infinite\n              && 'Carousel__navButton--noScroll'}`\n            }\n            onClick={prevScroll}\n          />\n\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              width: frameSize * itemWidth,\n            }}\n          >\n            <div\n              className=\"Carousel__list-scroll\"\n              style={currentTransform}\n            >\n              {images.map((img, index) => (\n                <li key={img}>\n                  <img\n                    src={img}\n                    alt={index + 1}\n                    width={`${itemWidth}px`}\n                    height={`${itemWidth}px`}\n                  />\n                </li>\n              ))}\n            </div>\n          </ul>\n\n          <button\n            type=\"button\"\n            className={`\n            Carousel__navButton\n            Carousel__navButton--prev\n            ${\n              this.state.isEnd\n              && !infinite\n              && 'Carousel__navButton--noScroll'}`\n            }\n            onClick={nextScroll}\n          />\n\n        </div>\n      );\n    }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\n\nimport Carousel from './components/Carousel';\n\nconst imagesFromServer = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nclass App extends React.Component {\n  state = {\n    images: imagesFromServer,\n    steep: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  changeInputSeting(target, typeSetting) {\n    const output = target.previousElementSibling;\n    const newState = {};\n\n    newState[typeSetting] = +target.value;\n\n    output.value = target.value;\n    output.style = 'color: rgb(112, 0, 93); font-size: 22px;';\n    this.setState(newState);\n  }\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>\n          Carousel with\n          {`: ${images.length} `}\n          images\n        </h1>\n\n        <form className=\"form\">\n          <label className=\"form__inputs\">\n            steep\n            <output className=\"form__outputs\" id=\"steep\">3</output>\n            <input\n              type=\"range\"\n              defaultValue=\"3\"\n              min=\"1\"\n              max=\"5\"\n              onInput={({ target }) => (\n                this.changeInputSeting(target, 'steep')\n              )}\n            />\n          </label>\n\n          <label className=\"form__inputs\">\n            frameSize\n            <output className=\"form__outputs\" id=\"frameSize\">3</output>\n            <input\n              type=\"range\"\n              defaultValue=\"3\"\n              min=\"1\"\n              max=\"5\"\n              onInput={({ target }) => (\n                this.changeInputSeting(target, 'frameSize')\n              )}\n            />\n          </label>\n\n          <label className=\"form__inputs\">\n            itemWidth\n            <output className=\"form__outputs\" id=\"itemWidth\">130</output>\n            <input\n              type=\"range\"\n              defaultValue=\"130\"\n              min=\"100\"\n              max=\"280\"\n              step=\"10\"\n              onInput={({ target }) => {\n                this.changeInputSeting(target, 'itemWidth');\n              }}\n            />\n          </label>\n\n          <p>\n            <label className=\"form__inputs\">\n              animationDuration\n              <output\n                className=\"form__outputs\"\n                id=\"animationDuration\"\n              >\n                1000\n              </output>\n              ms\n              <input\n                type=\"range\"\n                defaultValue=\"130\"\n                min=\"500\"\n                max=\"3500\"\n                step=\"500\"\n                onInput={({ target }) => (\n                  this.changeInputSeting(target, 'animationDuration')\n                )}\n              />\n            </label>\n\n            <label className=\"form__inputs\">\n              infinite\n              <input\n                type=\"checkbox\"\n                id=\"infinite\"\n                onChange={({ target }) => (\n                  this.setState({\n                    infinite: target.checked,\n                  })\n                )}\n              />\n            </label>\n          </p>\n\n        </form>\n\n        <Carousel\n          {...this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}